#+BEGIN_SRC emacs-lisp
  (bundle kiwanami/emacs-window-layout)
  (bundle kiwanami/emacs-window-manager)
  (require 'e2wm)
  
  (global-set-key (kbd "M-+") 'e2wm:start-management)
    
  (require 'e2wm-vcs)
  
    ;; (defvar e2wm:c-gdb-recipe
    ;;   '(| (:left-max-size 50)
    ;;       main sub))
    
    ;; (defvar e2wm:c-gdb-winfo
    ;;   '((:name main :plugin gdb-source)
    ;;     (:name sub  :plugin gdb-main)))
    
    ;; (defvar e2wm:def-plugin-gdb-main-buffer-name "*gud-a.out*" "[internal use]")
    ;; (defvar e2wm:def-plugin-gdb-sourse-buffer-name " *input/output of a.out*" "[internal use]")
    
    ;; (defun e2wm:def-plugin-gdb-main (frame wm winfo)
    ;;   (let ((buf (get-buffer e2wm:def-plugin-gdb-main-buffer-name)))
    ;;     (setq e2wm:def-plugin-gdb-main-window 
    ;;           (wlf:get-window wm (wlf:window-name winfo)))
    ;;     ;; (unless (and buf (buffer-live-p buf))
    ;;     ;;   (setq buf (e2wm:def-plugin-clock-update)))
    ;;     ;; (unless e2wm:def-plugin-clock-timer-handle
    ;;     ;;   (setq e2wm:def-plugin-clock-timer-handle
    ;;     ;;         (run-at-time
    ;;     ;;          e2wm:def-plugin-clock-timer-interval
    ;;     ;;          e2wm:def-plugin-clock-timer-interval
    ;;     ;;          'e2wm:def-plugin-clock-timer))
    ;;     ;; (e2wm:message "WM: 'clock' update timer started."))
    ;;     (wlf:set-buffer wm (wlf:window-name winfo) buf)))
    
    ;; (defun e2wm:def-plugin-gdb-source (frame wm winfo)
    ;;   (let ((buf (get-buffer e2wm:def-plugin-gdb-main-buffer-name)))
    ;;     (setq e2wm:def-plugin-gdb-main-window 
    ;;           (wlf:get-window wm (wlf:window-name winfo)))
    ;;     ;; (unless (and buf (buffer-live-p buf))
    ;;     ;;   (setq buf (e2wm:def-plugin-clock-update)))
    ;;     ;; (unless e2wm:def-plugin-clock-timer-handle
    ;;     ;;   (setq e2wm:def-plugin-clock-timer-handle
    ;;     ;;         (run-at-time
    ;;     ;;          e2wm:def-plugin-clock-timer-interval
    ;;     ;;          e2wm:def-plugin-clock-timer-interval
    ;;     ;;          'e2wm:def-plugin-clock-timer))
    ;;     ;; (e2wm:message "WM: 'clock' update timer started."))
    ;;     (wlf:set-buffer wm (wlf:window-name winfo) buf)))
    
    ;; (defun e2wm:dp-gdb ()
    ;;   (interactive)
    ;;   (e2wm:pst-change 'gdb))
    
    ;; (e2wm:pst-class-register 
    ;;   (make-e2wm:$pst-class
    ;;    :name   'gdb
    ;;    :title  "GDB"
    ;;    :init   'e2wm:dp-gdb-init
    ;;    :main   'main
    ;;    :switch 'e2wm:dp-gdb-switch
    ;;    :popup  'e2wm:dp-gdb-popup
    ;;    :keymap 'e2wm:dp-gdb-minor-mode-map))
    
    ;; (defun e2wm:dp-gdb-init ()
    ;;   (let* ((gdb-wm
    ;;           (wlf:no-layout e2wm:c-gdb-recipe e2wm:c-gdb-winfo))
    ;;          (buf (or prev-selected-buffer
    ;;                   (e2wm:history-get-main-buffer))))
    ;;     gdb-wm))
    
    ;; (defun e2wm:dp-gdb-switch (buf)
    ;;   (e2wm:mesage "#DP GDB switch : %s" buf)
    ;;   nil)
    
    ;; ;; (defun e2wm:dp-gdb-popup (buf)
    ;; ;;   (let ((cb (curent-buffer)))
    ;; ;;     (e2wm:message "#DP GDB popup : %s (current %s / backup %s)"
    ;; ;;                   buf cb e2wm:override-window-cfg-backup))
    ;; ;;   (let ((buf-name (buffer-name buf))
    ;; ;;         (wm (e2wm:pst-get-wm))
    ;; ;;         (not-minibufp (= 0 (minibuffer-depth))))
    ;; ;;     (e2wm:with-advice
    ;; ;;      (cond
    ;; ;;       ((equal buf-name gdb-
    
    
    ;; (defvar e2wm:dp-gdb-minor-mode-map
    ;;   (e2wm:define-keymap '() e2wm:prefix-key))
    
  (e2wm:add-keymap
   e2wm:pst-minor-mode-keymap
   '(("<M-f1>" . e2wm:dp-code)
     ("<M-f2>" . e2wm:dp-two)
     ("<M-f3>" . e2wm:dp-doc)
     ("<M-f4>" . e2wm:dp-dashboard)
     ("M-w" . e2wm:dp-magit)
     ) e2wm:prefix-key)
  
  (setq e2wm:db-list '(dp-code dp-magit dp-two dp-doc dp-dashboard))
  
  (defun e2wm:toggle-db ()
    (interactive)
    (let* ((next-dp (car e2wm:db-list))
           (f (intern (concat "e2wm:" (symbol-name next-dp)))))
      (progn
        (setq e2wm:db-list (append (cdr e2wm:db-list) (list next-dp)))
        (funcall f))))
    
    
    
    
    
    
#+END_SRC
