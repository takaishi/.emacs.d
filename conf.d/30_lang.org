* Golang

#+BEGIN_SRC emacs-lisp
  (bundle go-mode)
  (bundle  syohex/emacs-go-eldoc)
  (bundle syohex/emacs-go-direx)
  (bundle m2ym/direx-el)
  (if (string= "turris" (system-name))
      (progn
        (setenv "GOROOT" "/home/takaishi_r/.gvm/gos/go1.3.3")
        (add-to-list 'exec-path (expand-file-name "/home/takaishi_r/.gvm/gos/go1.3.3/bin"))))

  (if (string= "takaishi-no-MacBook-Air.local" (system-name))
      (setenv "GOROOT" "/usr/local/Cellar/go/1.2.1/libexec"))
  (setenv "GOPATH" (expand-file-name "/Users/rtakaishi"))

  (require 'go-mode)

  ;;(add-to-list 'exec-path (expand-file-name "~/homebrew/bin"))

  (add-to-list 'exec-path (expand-file-name "~/work/go/bin"))

  (add-to-list 'exec-path (expand-file-name "~/go/bin"))

  (add-hook 'go-mode-hook (lambda ()
                            (local-set-key (kbd "M-.") 'godef-jump)))

  (add-to-list 'load-path  (expand-file-name "~/src/github.com/nsf/gocode/emacs"))
  (require 'go-autocomplete)
  (require 'auto-complete-config)
  ;;(define-key ac-mode-map (kbd "TAB") 'auto-complete)

  (require 'go-eldoc) ;; Don't need to require, if you install by package.el
  (add-hook 'go-mode-hook 'go-eldoc-setup)
  (defun run-gofmt()
    (if (eq major-mode 'go-mode)
        (gofmt)))
  (add-hook 'before-save-hook 'run-gofmt)

  (setq gofmt-command "goimports")
  (add-hook 'before-save-hook #'gofmt-before-save)

  (require 'go-direx) ;; Don't need to require, if you install by package.el
  (define-key go-mode-map (kbd "C-c C-j") 'go-direx-pop-to-buffer)

  (bundle m2ym/popwin-el)
  (require 'popwin)
  (setq display-buffer-function 'popwin:display-buffer)

  (push '("^\*go-direx:" :regexp t :position left :width 0.4 :dedicated t :stick t)
        popwin:special-display-config)

  (bundle dominikh/go-errcheck.el)
  (require 'go-errcheck)

  (add-to-list 'load-path "~/src/github.com/golang/lint/misc/emacs")
  (require 'golint)
#+END_SRC

* Ruby
** flymake-ruby

リアルタイム文法チェックを行う。

#+BEGIN_SRC emacs-lisp
  ;; (require 'flymake)
  ;; (defun flymake-ruby-init ()
  ;;   (let* ((temp-file   (flymake-init-create-temp-buffer-copy
  ;;                        'flymake-create-temp-inplace))
  ;;          (local-file  (file-relative-name
  ;;                        temp-file
  ;;                        (file-name-directory buffer-file-name))))
  ;;     (list "ruby" (list "-c" local-file))))
   
  ;; (push '(".+\\.rb$" flymake-ruby-init) flymake-allowed-file-name-masks)
  ;; (push '("Rakefile$" flymake-ruby-init) flymake-allowed-file-name-masks)
  
  ;; (push '("^\\(.*\\):\\([0-9]+\\): \\(.*\\)$" 1 2 nil 3) flymake-err-line-patterns)
  
  ;; (add-hook 'ruby-mode-hook
  ;;           '(lambda ()
               
  ;;              ;; Don't want flymake mode for ruby regions in rhtml files and also on read only files
  ;;              (if (and (not (null buffer-file-name)) (file-writable-p buffer-file-name))
  ;;                  (flymake-mode t))
  ;;              ))
#+END_SRC

** rcodetools


#+BEGIN_SRC emacs-lisp
  (bundle rcodetools)
  (require 'rcodetools)
#+END_SRC

** xmpfilter

Rubyコードに注釈として実行結果を挿入する機能。
出力を挿入する箇所に"# =>"と書き、 M-x xmp を実行する。

#+BEGIN_SRC ruby
  def foo
    return "aaa"
  end
  
  foo # => "aaa"
#+END_SRC

** ruby-block

endに対応する行を強調する。

#+BEGIN_SRC emacs-lisp
  (bundle ruby-block)
  (require 'ruby-block)
  (setq ruby-block-highlight-toggle 'overlay)
  (add-hook 'ruby-mode-hook '(lambda () (ruby-block-mode t)))
  
#+END_SRC

** rspec

#+BEGIN_SRC emacs-lisp
  (require 'rspec-mode)
  (custom-set-variables '(rspec-use-rake-flag nil))
  
  ;; (bundle autotest)
  ;; (require 'autotest)
  
#+END_SRC
** rinari

#+BEGIN_SRC emacs-lisp
  ;(require 'rinari)
#+END_SRC
** 
#+BEGIN_SRC emacs-lisp
  (bundle inf-ruby)

  (add-to-list 'load-path "~/.emacs.d/elisp/ruby")

  (autoload 'ruby-mode "ruby-mode"
    "Mode for editing ruby source files" t)
  (setq auto-mode-alist
        (append '(("\\.rb$" . ruby-mode)) auto-mode-alist))

  (setq interpreter-mode-alist (append '(("ruby" . ruby-mode))
                       interpreter-mode-alist))

  (autoload 'run-ruby "inf-ruby"
         "Run an inferior Ruby process")
  (autoload 'inf-ruby-keys "inf-ruby"
         "Set local key defs for inf-ruby in ruby-mode")
  (add-hook 'ruby-mode-hook
        '(lambda () (inf-ruby-keys)))



  (autoload 'rubydb "rubydb3x"
    "run rubydb on program file in buffer *gud-file*.
  the directory containing file becomes the initial working directory
  and source-file directory for your debugger." t)

   (add-hook 'haml-mode-hook
            '(lambda ()
               (setq indent-tabs-mode nil)))

  ;;(require 'anything-rurima)
  ;;(setq anything-rurima-index-file "~/.emacs.d/doc/rubydoc/rurima.e")


  ;; (defvar anything-c-source-refe
  ;;       `((name . "refe")
  ;;         (candidates-file . "~/.emacs.d/doc/rubyrefm/bitclust/refe.index")    
  ;;         (action ("Show" . anything-refe-action))))

  ;; (defun anything-refe-action (word)
  ;;   (let ((buf-name (concat "*refe:" word "*")))
  ;;     (with-current-buffer (get-buffer-create buf-name)
  ;;       (call-process "refe" nil t t word)
  ;;       (goto-char (point-min))
  ;;       (my-view-buffer-other-window buf-name t
  ;;                                 (lambda (dummy)
  ;;                                   (kill-buffer-and-window))))))

  ;; (defun anything-refe ()
  ;;   (interactive)
  ;;   (anything anything-c-source-refe))

  ;; ;; view-buffer-other-window の switch-to-buffer-other-window を switch-to-buffer にしたもの. letf でもよい.
  ;; (defun my-view-buffer-other-window (buffer &optional not-return exit-action)
  ;;   (let* ((win               ; This window will be selected by
  ;;       (get-lru-window))     ; switch-to-buffer-other-window below.
  ;;      (return-to
  ;;       (and (not not-return)
  ;;            (cons (selected-window)
  ;;              (if (eq win (selected-window))
  ;;              t          ; Has to make new window.
  ;;                (list
  ;;             (window-buffer win) ; Other windows old buffer.
  ;;             (window-start win)
  ;;             (window-point win)))))))
  ;;     (switch-to-buffer buffer) ;変更
  ;;     (view-mode-enter (and return-to (cons (selected-window) return-to))
  ;;              exit-action)))

  ;; (add-hook 'ruby-mode-hook
  ;;   (lambda()
  ;;     (define-key ruby-mode-map [f1] 'anything-refe)))

  ;; (defun anything-refe-at-point ()
  ;;   (interactive)
  ;;   (anything '(anything-c-source-refe)
  ;;             (thing-at-point 'symbol) nil nil nil "*Refe*"))
  ;; (define-key ruby-mode-map (kbd "C-M-;") 'anything-refe-at-point)


  (setq auto-mode-alist
        (append '(("\\.erb$" . rhtml-mode)) auto-mode-alist))

  (add-hook 'speedbar-mode-hook
            (lambda ()
                    (speedbar-add-supported-extension ".rb")))
#+END_SRC




* JavaScript

#+BEGIN_SRC emacs-lisp
  (bundle thomblake/js3-mode)
  (bundle aki2o/emacs-tss)
  (bundle joshwnj/json-mode)
  (bundle gongo/json-reformat)
  (bundle Sterlingg/json-snatcher)
  (bundle aki2o/log4e)
  (bundle aki2o/yaxception)

  (require 'typescript)
  (add-to-list 'auto-mode-alist '("\\.ts\\'" . typescript-mode))

  (require 'tss)

  ;; Key binding
  (setq tss-popup-help-key "C-:")
  (setq tss-jump-to-definition-key "C->")
  (setq tss-implement-definition-key "C-c i")

  ;; Make config suit for you. About the config item, eval the following sexp.
  ;; (customize-group "tss")

  ;; Do setting recommemded configuration
  (tss-config-default)
  (require 'coffee-mode)
  (add-to-list 'auto-mode-alist '("\\.coffee$" . coffee-mode))

  (bundle danielevans/handlebars-mode)
  (require 'handlebars-mode)
  (add-to-list 'auto-mode-alist '("\\.hbs$" . handlebars-mode))
  (bundle fxbois/web-mode)
  (require 'web-mode)
  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.jsx?\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.js$" . javascript-mode))
  (setq js-indent-level 4)
#+END_SRC

* Groovy, Gradle

#+BEGIN_SRC emacs-lisp
  (require 'groovy-mode)
  (add-to-list 'auto-mode-alist '("\\.gradle" . groovy-mode))
#+END_SRC

* Rst
#+BEGIN_SRC emacs-lisp
  (mmm-add-classes
   '((mmm-rst-javascript-mode
      :submode javascript-mode
      :face mmm-code-submode-face
      :front ".. code-block:: js\n"
      :back "\n\n")))
  (mmm-add-mode-ext-class 'rst-mode nil 'mmm-rst-javascript-mode)
#+END_SRC

* Xml
** sgml-mode + mmm-mode
CDATAでecmaを指定している箇所ではjavascript-modeを使う。

#+BEGIN_SRC emacs-lisp
  (el-get 'sync 'mmm-mode)
  (require 'mmm-mode)

  (setq mmm-global-mode 'maybe)
  (setq auto-mode-alist
        (append '(("\\.xml$" . sgml-mode)) auto-mode-alist))

  ;; (mmm-add-classes
  ;;  '((mmm-sgml-javascript-mode
  ;;     :submode javascript-mode
  ;;     :face mmm-code-submode-face
  ;;     :front "<!\\[CDATA\\[[ \n]*ecma:"
  ;;     :back "\\]\\]>")))

  (mmm-add-classes
   '((mmm-aqua-ecma-script
      :submode javascript-mode
      :delimiter-mode nil
      :front "ecma:"
      :back "\\]\\]>\\|\"[^/]*/>"
      :insert ((?s aqua-ecma-script nil @ "<![CDATA[\n  ecma:" @ "\n    " _ "\n" @ "]]>" @))
      )))

  (mmm-add-mode-ext-class nil "schema.xml" 'mmm-aqua-ecma-script)
  (mmm-add-mode-ext-class nil "extaction.xml" 'mmm-aqua-ecma-script)
  ;;(add-to-list 'auto-mode-alist '("schema.xml$" . aqua-schema-mode))
  ;;(add-to-list 'auto-mode-alist '("extaction.xml$" . aqua-extaction-mode))

  ;; (setq javascript-indent-level 1)
  (mmm-add-mode-ext-class 'sgml-mode nil 'mmm-aqua-ecma-script)
#+END_SRC

** hs-minor-modeでXMLの要素を折り畳めるようにする

#+BEGIN_SRC emacs-lisp
  ;; (add-hook 'sgml-mode-hook
  ;;           '(lambda()
  ;;              (hs-minor-mode 1)))

  ;; (add-to-list 'hs-special-modes-alist
  ;;              '(sgml-mode
  ;;                "<!--\\|<[^/>]>\\|<[^/][^>]*[^/]>"
  ;;                ""
  ;;                "<!--"
  ;;                sgml-skip-tag-forward
  ;;                nil))
#+END_SRC
