#+TITLE: その他の設定
#+AUTHOR: Ryo Takaishi
#+LINK_HOME: http://repl.info/
#+LINK_UP: http://repl.info/emacs/config/
#+OPTIONS: toc:nil author:nil creator:nil
#+STYLE: <link rel="stylesheet" type="text/css" href="/style/style.css">
#+STYLE: <script type="text/javascript" src="./jquery-1.4.2.js"></script> <script type="text/javascript" src="./jquery.timer.js"></script><script type="text/javascript" src="./my.js"></script>

* バッファ全体をインデントする

#+BEGIN_SRC emacs-lisp
  (defun indent-buffer ()
    (interactive)
    (let ((beg (point-min))
          (end (point-max)))
      (indent-region beg end)))
#+END_SRC
* hl-line

#+BEGIN_SRC emacs-lisp
  ;; (require 'hl-line+)
  ;; (toggle-hl-line-when-idle)
  ;; (set-face-background 'hl-line "gray60")
  ;; (set-face-foreground 'hl-line "white")
#+END_SRC
  
* 
** バックアップファイルを作成しない

   #+BEGIN_SRC emacs-lisp
     (setq backup-inhibited t)
        
   #+END_SRC
** ビープ音を消す
  #+BEGIN_SRC emacs-lisp
  (setq visible-bell t)
#+END_SRC

** スタートアップ時のメッセージを抑制
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
#+END_SRC

** バックアップしない
#+BEGIN_SRC emacs-lisp
(setq make-backup-files nil)
#+END_SRC

** 自動保存したファイルを削除する。
#+BEGIN_SRC emacs-lisp
(setq delete-auto-save-files t)
#+END_SRC

** 圧縮されたファイルも編集＆日本語infoの文字化け防止
#+BEGIN_SRC emacs-lisp
(auto-compression-mode t)
#+END_SRC

** 自動セーブしない
#+BEGIN_SRC emacs-lisp
(setq auto-save-default nil)
(setq auto-save-list-file-prefix nil)   ; don't make ~/.saves-PID-hostname
#+END_SRC

** kill-lineで行末の改行文字も削除
#+BEGIN_SRC emacs-lisp
(setq kill-whole-line t)
#+END_SRC

** emacsとXWindowのクリップボードを共有する
#+BEGIN_SRC emacs-lisp
(setq x-select-enable-clipboard t)
#+END_SRC

** GCを減らす
#+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold (* 30 gc-cons-threshold))
#+END_SRC

** ログの記録量を増やす
#+BEGIN_SRC emacs-lisp
(setq message-log-max 10000)
#+END_SRC

** 履歴存数を増やす

ミニバッファの履歴を保持する最大数を設定する。
デフォルトは30だが、少なすぎるので1000にする。
#+BEGIN_SRC emacs-lisp
  (setq history-length 1000)
#+END_SRC

** 大きなファイルを開く際の警告を出すファイルサイズの設定

デフォルトでは、10MB以上のファイルを開こうとすると警告を表示する。
その設定を変更し、20MB以上でなければ警告しないようにする。

#+BEGIN_SRC emacs-lisp
  (setq large-file-warning-threshold (* 20 1024 1024))
#+END_SRC
** ダイアログボックスを使わない
#+BEGIN_SRC emacs-lisp
(setq use-dialog-box nil)
(defalias 'message-box 'message)
#+END_SRC

** yesで答る部分もyで答えられるように
#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** ファイルが更新されていたら自動的に再読み込み
#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode)
#+END_SRC

** session.el

#+BEGIN_SRC emacs-lisp
  ;; (require 'session)
  ;; (add-hook 'after-init-hook 'session-initialize)
#+END_SRC

** minibuf-isearch

#+BEGIN_SRC emacs-lisp
  ;;(require 'minibuf-isearch)
#+END_SRC

** gnuplot

#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.plt$" . gnuplot-mode))
#+END_SRC

** stumpwm

#+BEGIN_SRC emacs-lisp
  ;; (require 'stumpwm-mode)
  ;; (add-to-list 'auto-mode-alist '("\\.stumpwmrc$" . stumpwm-mode))
#+END_SRC

** auto-instamm

#+BEGIN_SRC emacs-lisp
  ;; (require 'auto-install)
  ;; (setq auto-install-directroy "~/.emacs.d/elisp/")
  ;; (auto-install-update-emacswiki-package-name t)
#+END_SRC

** 

#+BEGIN_SRC emacs-lisp
  
  (defun rt/eieio-create-slots ()
    (interactive)
    (let ((l (split-string (read-from-minibuffer "") " ")))
      (insert (format "%S"
                      (mapcar (lambda (att)
                                (list (intern att) :initarg (intern (concat ":" att))))
                              l)))))
  
  
  
#+END_SRC

** show-paren-mode

#+BEGIN_SRC emacs-lisp
  (show-paren-mode t)
#+END_SRC

** 今いるのはどの関数の中かモードラインに表示する

#+BEGIN_SRC emacs-lisp
  (setq which-function-mode t)
  (custom-set-faces '(which-func ((t (:foreground "deep sky blue")))))
#+END_SRC
** その他

#+BEGIN_SRC emacs-lisp
  (setq message-log-max 10000)
#+END_SRC
* my-outputz

#+BEGIN_SRC emacs-lisp
  ;; (add-to-list 'load-path "~/Dropbox/code/elisp/")
  ;; (require 'my-outputz)
  ;; (global-outputz-mode t)
#+END_SRC

* auto async
#+BEGIN_SRC
(require 'auto-async-byte-compile)
(setq auto-async-byte-compile-exclude-files-regexp "/junk/")
(add-hook 'emacs-lisp-mode-hook 'enable-auto-async-byte-compile-mode)
#+END_SRC
* highlight-change-mode

#+BEGIN_SRC emacs-lisp
  (custom-theme-set-faces 'user '(highlight-changes ((t nil))))
  (custom-theme-set-faces 'user '(highlight-changes ((t nil))))
  (custom-theme-set-faces 'user '(highlight-changes-delete ((t nil))))
  (setq highlight-changes-visibility-initial-state nil)
#+END_SRC

* 

#+BEGIN_SRC emacs-lisp
  (if run-linux
      (setq browse-url-browser-function 'browse-url-firefox))
  
#+END_SRC
* groovy

#+BEGIN_SRC emacs-lisp
  (require 'groovy-mode)
#+END_SRC

* po

#+BEGIN_SRC emacs-lisp
  (require 'po-mode)
#+END_SRC

* aqua-

#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/site-lisp")
  (require 'aqua-schema)
  
#+END_SRC
* 

  #+BEGIN_SRC emacs-lisp
    ;; シンボリックリンクの読み込みを許可
    (setq vc-follow-symlinks t)
    ;; シンボリックリンク先のVCS内で更新が入った場合にバッファを自動更新
    (setq auto-revert-check-vc-info t)
  #+END_SRC

#+BEGIN_SRC emacs-lisp
  (add-hook 'after-init-hook
    (lambda ()
      (message "init time: %.3f sec"
               (float-time (time-subtract after-init-time before-init-time)))))
  
#+END_SRC
* 
#+BEGIN_SRC emacs-lisp
  (require 'uniquify)
  (setq uniquify-buffer-name-style 'post-forward-angle-brackets)
#+END_SRC

*

#+BEGIN_SRC emacs-lisp
  (bundle spotify/dockerfile-mode)
  (require 'dockerfile-mode)
  (add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode))
#+END_SRC

* swoop

#+BEGIN_SRC emacs-lisp

  (bundle ShingoFukuyama/helm-swoop)
  (require 'helm-swoop)
  (global-set-key (kbd "M-i") 'helm-swoop)
  (global-set-key (kbd "M-I") 'helm-swoop-back-to-last-point)
  (global-set-key (kbd "C-c M-i") 'helm-multi-swoop)
  (global-set-key (kbd "C-x M-i") 'helm-multi-swoop-all)

  ;; isearch実行中にhelm-swoopに移行
  (define-key isearch-mode-map (kbd "M-i") 'helm-swoop-from-isearch)
  ;; helm-swoop実行中にhelm-multi-swoop-allに移行
  (define-key helm-swoop-map (kbd "M-i") 'helm-multi-swoop-all-from-helm-swoop)

  ;; Save buffer when helm-multi-swoop-edit complete
  (setq helm-multi-swoop-edit-save t)

  ;; 値がtの場合はウィンドウ内に分割、nilなら別のウィンドウを使用
  (setq helm-swoop-split-with-multiple-windows nil)

  ;; ウィンドウ分割方向 'split-window-vertically or 'split-window-horizontally
  (setq helm-swoop-split-direction 'split-window-vertically)

  ;; nilなら一覧のテキストカラーを失う代わりに、起動スピードをほんの少し上げる
  (setq helm-swoop-speed-or-color t)
  ;; (bundle  ShingoFukuyama/emacs-swoop)
  ;; (bundle joddie/pcre2el)
  ;; (bundle jwiegley/emacs-async)
  ;; (bundle Wilfred/ht.el)
  ;; (require 'swoop)
  ;; (global-set-key (kbd "C-o")   'swoop)
  ;; (global-set-key (kbd "C-M-o") 'swoop-multi)
  ;; (global-set-key (kbd "M-o")   'swoop-pcre-regexp)
  ;; (global-set-key (kbd "C-S-o") 'swoop-back-to-last-position)
  ;; (global-set-key (kbd "H-6")   'swoop-migemo) ;; Option for Japanese match

  ;; ;; 検索の移行
  ;; ;; isearch     > press [C-o] > swoop
  ;; ;; evil-search > press [C-o] > swoop
  ;; ;; swoop       > press [C-o] > swoop-multi
  ;; (define-key isearch-mode-map (kbd "C-o") 'swoop-from-isearch)
  ;; (define-key evil-motion-state-map (kbd "C-o") 'swoop-from-evil-search)
  ;; (define-key swoop-map (kbd "C-o") 'swoop-multi-from-swoop)
#+END_SRC

* dired

#+BEGIN_SRC emacs-lisp
  (when (require 'dired-list-all-mode nil t)
    (setq dired-listing-switches "-lhFG")
    (add-hook 'dired-mode-hook
              (lambda ()
                (define-key dired-mode-map "a" 'dired-list-all-mode)
                )))
#+END_SRC


#+BEGIN_SRC emacs-lisp


  (defadvice tramp-handle-vc-registered (around tramp-handle-vc-registered-around activate)
    (let ((vc-handled-backends '(SVN Git))) ad-do-it))
#+END_SRC


#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode))


  (require 'thingatpt)
#+END_SRC

